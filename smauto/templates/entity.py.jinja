#!/usr/bin/env python

import time
import random

from enum import Enum
from dataclasses import dataclass
from os import wait
import time
import numpy as np

{% if entity.broker.__class__.__name__ == 'MQTTBroker' %}
from commlib.transports.mqtt import ConnectionParameters
from rich import print, console, pretty
{% endif %}
from commlib.msg import PubSubMessage
from commlib.utils import Rate
from commlib.node import Node

pretty.install()
console = console.Console()


# Noise definitions
# ----------------------------------------
@dataclass
class NoiseUniform:
    min: float
    max: float


@dataclass
class NoiseGaussian:
    mu: float
    sigma: float


@dataclass
class NoiseZero:
    pass


class NoiseType(Enum):
    Uniform = 1
    Gaussian = 2
    Zero = 3


class Noise:
    def __init__(self, _type, properties):
        self.type = _type
        self.properties = properties

    def generate(self):
        if self.type == NoiseType.Uniform:
            return random.uniform(self.properties.min, self.properties.max)
        elif self.type == NoiseType.Gaussian:
            return random.gauss(self.properties.mu, self.properties.sigma)
# ----------------------------------------

# Value generator definitions
# ----------------------------------------

@dataclass
class ValueGeneratorProperties:
    @dataclass
    class Constant:
      value: float


    @dataclass
    class Linear:
      start: float
      increase: float # per second


    @dataclass
    class Gaussian:
      value: float
      max_value: float
      sigma: float # this is time (seconds)


class ValueGeneratorType(Enum):
    Constant = 1
    Linear = 2
    Gaussian = 3
    Step = 4
    Saw = 5
    Sinus = 6
    Logarithmic = 7
    Exponential = 8
# ----------------------------------------


class ValueComponent:
    def __init__(self, _type, name, properties, noise):
        self.type = _type
        self.name = name
        self.properties = properties
        self.noise = noise


class ValueGenerator:
    def __init__(self, namespace, name, hz, components, connection):
        self.namespace = namespace
        self.name = name
        self.hz = hz
        self.components = components

        self.commlib_node = Node(
            connection_params=connection,
            debug=True
        )
        topic = f"{self.namespace}/{self.name}" if self.namespace != None else f"{self.name}"
        self.publisher = self.commlib_node.create_publisher(topic=topic)

    def generate(self, minutes = 1):
        start = time.time()
        internal_start = start
        value = None
        while time.time() - start < minutes * 60.0:
            msg = {}
            for c in self.components:
                if c.type == ValueGeneratorType.Constant:
                    value = c.properties.value + c.noise.generate()
                elif c.type == ValueGeneratorType.Linear:
                    value = c.properties.start + (time.time() - start) * c.properties.increase
                    value += c.noise.generate()
                elif c.type == ValueGeneratorType.Gaussian:
                    if time.time() - internal_start > 8 * c.properties.sigma:
                        internal_start = time.time()
                    value = c.properties.value
                    _norm_exp = -np.power(
                        time.time() - internal_start - 4 * c.properties.sigma, 2.
                    ) / (2 * np.power(c.properties.sigma, 2.))
                    value += np.exp(_norm_exp) * (c.properties.max_value - c.properties.value)
                    value += c.noise.generate()
                msg[c.name] = value

            self.publisher.publish(
                {
                    'timestamp': time.time(),
                    'data': msg
                }
            )
            print(f"Publishing {msg}")
            time.sleep(1.0 / self.hz)


class {{ entity.camel_name }}Msg(PubSubMessage):
    {% for a in entity.attributes %}
    {% if a.type == "str" %}
        {{ a.name }}: {{ a.type }} = '{{ a.value }}'
    {% else %}
        {{ a.name }}: {{ a.type }} = {{ a.value }}
    {% endif %}
    {% endfor %}


class {{ entity.camel_name }}Node(Node):
    def __init__(self, *args, **kwargs):
    {% if entity.etype == 'actuator' %}
        self.tick_hz = 1
    {% elif entity.etype == 'sensor' %}
        self.pub_freq = 1
    {% endif %}
        self.topic = '{{ entity.topic }}'
        conn_params = ConnectionParameters(
            host='{{ entity.broker.host }}',
            port={{ entity.broker.port }},
            username='{{ entity.broker.username }}',
            password='{{ entity.broker.password }}',
        )
        super().__init__(
            node_name='entities.{{ entity.name.lower() }}',
            connection_params=conn_params,
            *args, **kwargs
        )
    {% if entity.etype == 'actuator' %}
        self.sub = self.create_subscriber(
            msg_type={{ entity.camel_name }}Msg,
            topic=self.topic,
            on_message=self._on_message
        )

    def start(self):
        self.run()
        rate = Rate(self.tick_hz)
        while True:
            rate.sleep()

    def _on_message(self, msg):
        print(f'[*] State change command received: {msg}')
    {% elif entity.etype == 'sensor' %}
        self.pub = self.create_publisher(
            msg_type={{ entity.camel_name }}Msg,
            topic=self.topic
        )

    def start(self):
        self.run()
        rate = Rate(self.pub_freq)
        while True:
            msg = self.gen_data()
            print(f'[bold]\[{{ entity.name }}][/bold] Sending data: {msg}')
            self.pub.publish(msg)
            rate.sleep()

    def gen_data(self):
        msg = {{ entity.camel_name }}Msg()
        {% for attr in entity.attributes %}
        {% if attr.generator.__class__.__name__ == 'UniformFun' %}
        msg.{{ attr.name }} = random.uniform({{ attr.generator.min }}, {{ attr.generator.max }})
        {% elif attr.generator.__class__.__name__ == 'GaussianFun' %}
        msg.{{ attr.name }} = random.gauss({{ attr.generator.mu }}, {{ attr.generator.sigma }})
        {% elif attr.generator.__class__.__name__ == 'ConstantFun' %}
        msg.{{ attr.name }} = attr.generator.value
        {% elif attr.generator.__class__.__name__ == 'LinearFun' %}
        if not hasattr(self, "_{{ attr.name }}"):
            val = {{ attr.generator.from }}
        else:
            val = self._{{ attr.name }} + {{ attr.generator.step }}
        if val > {{ attr.generator.to }}:
            val = {{ attr.generator.from }}
        self._{{ attr.name }} = val
        msg.{{ attr.name }} = val
        {% else %}
        msg.{{ attr.name }} = random.random()
        {% endif %}
        {% endfor %}
        return msg

    {% endif %}

if __name__ == '__main__':
    node = {{ entity.camel_name }}Node()
    node.start()
