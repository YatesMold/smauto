#!/usr/bin/env python

import time
import random

{% if entity.broker.__class__.__name__ == 'MQTTBroker' %}
from commlib.transports.mqtt import ConnectionParameters
from rich import print, console, pretty
{% endif %}
from commlib.msg import PubSubMessage
from commlib.utils import Rate
from commlib.node import Node

pretty.install()
console = console.Console()

class {{ entity.camel_name }}Msg(PubSubMessage):
    {% for a in entity.attributes %}
    {% if a.type == "str" %}
        {{ a.name }}: {{ a.type }} = '{{ a.value }}'
    {% else %}
        {{ a.name }}: {{ a.type }} = {{ a.value }}
    {% endif %}
    {% endfor %}


class {{ entity.camel_name }}Node(Node):
    def __init__(self, *args, **kwargs):
    {% if entity.etype == 'actuator' %}
        self.tick_hz = 1
    {% elif entity.etype == 'sensor' %}
        self.pub_freq = 1
    {% endif %}
        self.topic = '{{ entity.topic }}'
        conn_params = ConnectionParameters(
            host='{{ entity.broker.host }}',
            port={{ entity.broker.port }},
            username='{{ entity.broker.username }}',
            password='{{ entity.broker.password }}',
        )
        super().__init__(
            node_name='entities.{{ entity.name.lower() }}',
            connection_params=conn_params,
            *args, **kwargs
        )
    {% if entity.etype == 'actuator' %}
        self.sub = self.create_subscriber(
            msg_type={{ entity.camel_name }}Msg,
            topic=self.topic,
            on_message=self._on_message
        )

    def start(self):
        self.run()
        rate = Rate(self.tick_hz)
        while True:
            rate.sleep()

    def _on_message(self, msg):
        print(f'[*] State change command received: {msg}')
    {% elif entity.etype == 'sensor' %}
        self.pub = self.create_publisher(
            msg_type={{ entity.camel_name }}Msg,
            topic=self.topic
        )

    def start(self):
        self.run()
        rate = Rate(self.pub_freq)
        while True:
            msg = self.gen_data()
            print(f'[bold]\[{{ entity.name }}][/bold] Sending data: {msg}')
            self.pub.publish(msg)
            rate.sleep()

    def gen_data(self):
        msg = {{ entity.camel_name }}Msg()
        {% for attr in entity.attributes %}
        {% if attr.generator.__class__.__name__ == 'UniformGen' %}
        msg.{{ attr.name }} = random.uniform({{ attr.generator.from }}, {{ attr.generator.to }})
        {% elif attr.generator.__class__.__name__ == 'ConstantGen' %}
        msg.{{ attr.name }} = attr.generator.value
        {% elif attr.generator.__class__.__name__ == 'LinearGen' %}
        if not hasattr(self, "_{{ attr.name }}"):
            val = {{ attr.generator.from }}
        else:
            val = self._{{ attr.name }} + {{ attr.generator.step }}
        if val > {{ attr.generator.to }}:
            val = {{ attr.generator.from }}
        self._{{ attr.name }} = val
        msg.{{ attr.name }} = val
        {% endif %}
        {% endfor %}
        return msg

    {% endif %}

if __name__ == '__main__':
    node = {{ entity.camel_name }}Node()
    node.start()
